
#======================
# Status/Connection
#======================

record(bi, "$(P)Control:Connected")
{
    field(DESC, "RTDE Connection status")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))IS_CONNECTED")
    field(SCAN, "I/O Intr")
}

record(bi, "$(P)Control:Steady")
{
    field(DESC, "Is robot fully at rest")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))IS_STEADY")
    field(SCAN, "I/O Intr")
}

record(bo, "$(P)Control:Disconnect")
{
    field(DESC, "Disconnects from the RTDE interface")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))DISCONNECT")
}

record(bo, "$(P)Control:Reconnect")
{
    field(DESC, "Tries reconnecting to the RTDE interface")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))RECONNECT")
}

record(bo, "$(P)Control:ReuploadControlScript")
{
    field(DESC, "Reuploads control script to controller")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))REUPLOAD_CONTROL_SCRIPT")
}

record(bo, "$(P)Control:StopControlScript")
{
    field(DESC, "Stops the control script")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))STOP_CONTROL_SCRIPT")
}

#======================
# Misc
#======================

record(bo, "$(P)Control:Asynchronous")
{
    field(DESC, "If 1, moves will be asynchronous")
    field(DTYP, "asynInt32")
    field(VAL, 1)
    field(PINI, 1)
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ASYNC_MOVE")
}

record(bi, "$(P)Control:AsyncMoveDone")
{
    field(DESC, "1 if asynchronous motion complete")
    field(DTYP, "asynInt32")
    field(VAL, 1)
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ASYNC_MOVE_DONE")
    field(SCAN, "I/O Intr")
}

record(bi, "$(P)Control:WaypointActionAsyn")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))RUN_WAYPOINT_ACTION")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(P)Control:WaypointAction.PROC")
}

record(bo, "$(P)Control:WaypointAction")
{
    field(FLNK, "") # set by waypoint
}

record(calcout, "$(P)Control:WaypointActionDoneCalc")
{
    field(INPA, "") # set by waypoint
    field(CALC, "A")
    field(OUT, "$(P)Control:WaypointActionDone PP")
}

record(bo, "$(P)Control:WaypointActionDone")
{
    field(DESC, "1 if waypoint action done, otherwise 0")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))WAYPOINT_ACTION_DONE")
}

record(bo, "$(P)Control:TeachMode")
{
    field(DESC, "Enabled teach/freedrive mode")
    field(DTYP, "asynInt32")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(VAL, 0)
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))TEACH_MODE")
}

record(fanout, "$(P)Control:Stop")
{
    field(LNK0, "$(P)Control:stopL")
    field(LNK1, "$(P)Control:reset_both_cmd")
}

record(fanout, "$(P)Control:reset_both_cmd")
{
    field(LNK0, "$(P)Control:ResetJCmd")
    field(LNK1, "$(P)Control:ResetPoseCmd")
}

record(calcout, "$(P)Control:reset_after_async_move") {
    field(INPA, "$(P)Control:AsyncMoveDone CP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT, "$(P)Control:reset_both_cmd.PROC")
}

#======================
# Joint control
#======================

record(bo, "$(P)Control:moveJ")
{
    field(DESC, "Moves joints to commanded values")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))MOVEJ")
}

record(bo, "$(P)Control:waypoint_moveJ")
{
    field(DESC, "moveJ followed by gripper action")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))WAYPOINT_MOVEJ")
}

record(ao, "$(P)Control:JointSpeed")
{
    field(DESC, "Joint speeds for moveJ")
    field(DTYP, "asynFloat64")
    field(PREC, 2)
    field(EGU, "rad/s")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))JOINT_SPEED")
}

record(ao, "$(P)Control:JointAcceleration")
{
    field(DESC, "Joint accelerations for moveJ")
    field(DTYP, "asynFloat64")
    field(PREC, 2)
    field(EGU, "rad/s/s")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))JOINT_ACCELERATION")
}

record(ao, "$(P)Control:JointBlend")
{
    field(DESC, "Blend radius for joint paths")
    field(DTYP, "asynFloat64")
    field(PREC, 2)
    field(EGU, "m")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))JOINT_BLEND")
}

record(bo, "$(P)Control:stopJ")
{
    field(DESC, "Moves joints to commanded values")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))STOPJ")
    field(FLNK, "$(P)Control:reset_both_cmd.PROC")
}

record(bo, "$(P)Control:AutoMoveJ")
{
    field(DESC, "If 1, moveJ runs when JxCmd changes")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL, 0)
}

record(calcout, "$(P)Control:auto_moveJ_calc")
{
    field(INPA, "$(P)Control:AutoMoveJ")
    field(CALC, "A")
    field(OOPT, "When Non-zero")
    field(OUT, "$(P)Control:moveJ.PROC")
}

# current joint positions for use interally with this database
record(waveform, "$(P)Control:ActualQ")
{
    field(DESC, "Actual joint positions")     
    field(DTYP, "asynFloat64ArrayIn")
    field(FTVL, "DOUBLE")
    field(PINI, "1")
    field(EGU, "deg")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ACTUAL_Q")
    field(NELM, 6)
    field(FLNK, "$(P)Q_index_fanout.PROC")
    field(SCAN, "I/O Intr")
}

record(fanout, "$(P)Q_index_fanout")
{
    field(LNK0, "$(P)Control:ActualQ_index0")
    field(LNK1, "$(P)Control:ActualQ_index1")
    field(LNK2, "$(P)Control:ActualQ_index2")
    field(LNK3, "$(P)Control:ActualQ_index3")
    field(LNK4, "$(P)Control:ActualQ_index4")
    field(LNK5, "$(P)Control:ActualQ_index5")
}

# subArray to extract each element of ActualQ waveform
record(subArray, "$(P)Control:ActualQ_index0")
{
    field(INP, "$(P)Control:ActualQ.VAL")
    field(FTVL, "DOUBLE")
    field(MALM, "6")
    field(NELM, "1")
    field(INDX, "0")
    field(PREC, 4)
}
record(subArray, "$(P)Control:ActualQ_index1")
{
    field(INP, "$(P)Control:ActualQ.VAL")
    field(FTVL, "DOUBLE")
    field(MALM, "6")
    field(NELM, "1")
    field(INDX, "1")
    field(PREC, 4)
}
record(subArray, "$(P)Control:ActualQ_index2")
{
    field(INP, "$(P)Control:ActualQ.VAL")
    field(FTVL, "DOUBLE")
    field(MALM, "6")
    field(NELM, "1")
    field(INDX, "2")
    field(PREC, 4)
}
record(subArray, "$(P)Control:ActualQ_index3")
{
    field(INP, "$(P)Control:ActualQ.VAL")
    field(FTVL, "DOUBLE")
    field(MALM, "6")
    field(NELM, "1")
    field(INDX, "3")
    field(PREC, 4)
}
record(subArray, "$(P)Control:ActualQ_index4")
{
    field(INP, "$(P)Control:ActualQ.VAL")
    field(FTVL, "DOUBLE")
    field(MALM, "6")
    field(NELM, "1")
    field(INDX, "4")
    field(PREC, 4)
}
record(subArray, "$(P)Control:ActualQ_index5")
{
    field(INP, "$(P)Control:ActualQ.VAL")
    field(FTVL, "DOUBLE")
    field(MALM, "6")
    field(NELM, "1")
    field(INDX, "5")
    field(PREC, 4)
}

# stores DOLx.VAL in LNKx.VAL
# resets commanded joint angles to the current measured angles
record(seq, "$(P)Control:ResetJCmd")
{
    field(PINI, 1)

    field(DOL0, "$(P)Control:ActualQ_index0")
    field(LNK0, "$(P)Control:J1Cmd PP")

    field(DOL1, "$(P)Control:ActualQ_index1")
    field(LNK1, "$(P)Control:J2Cmd PP")

    field(DOL2, "$(P)Control:ActualQ_index2")
    field(LNK2, "$(P)Control:J3Cmd PP")

    field(DOL3, "$(P)Control:ActualQ_index3")
    field(LNK3, "$(P)Control:J4Cmd PP")
    
    field(DOL4, "$(P)Control:ActualQ_index4")
    field(LNK4, "$(P)Control:J5Cmd PP")

    field(DOL5, "$(P)Control:ActualQ_index5")
    field(LNK5, "$(P)Control:J6Cmd PP")
}

# -----------------------------------------------------------

record(ao, "$(P)Control:J1Cmd")
{
    field(DESC, "Commanded angle for joint 1")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))J1CMD")
    field(EGU, "deg")
    field(PINI, 1)
    field(PREC, 4)
    field(FLNK, "$(P)Control:auto_moveJ_calc.PROC")
}
record(ao, "$(P)Control:J1TweakVal")
{
    field(DESC, "Joint 1 tweak step size")
    field(EGU, "deg")
    field(PREC, 4)
}
record(bo, "$(P)Control:J1TweakFwd")
{
    field(DESC, "Tweak joint 1 forward")
    field(FLNK, "$(P)Control:J1TweakCalcFwd.PROC")
}
record(bo, "$(P)Control:J1TweakRev")
{
    field(DESC, "Tweak joint 1 backward")
    field(FLNK, "$(P)Control:J1TweakCalcRev.PROC")
}
record(calcout, "$(P)Control:J1TweakCalcFwd")
{
    field(INPA, "$(P)Control:J1Cmd")
    field(INPB, "$(P)Control:J1TweakVal")
    field(CALC, "A + B")
    field(OUT, "$(P)Control:J1Cmd PP")
}
record(calcout, "$(P)Control:J1TweakCalcRev")
{
    field(INPA, "$(P)Control:J1Cmd")
    field(INPB, "$(P)Control:J1TweakVal")
    field(CALC, "A - B")
    field(OUT, "$(P)Control:J1Cmd PP")
}

# -----------------------------------------------------------

record(ao, "$(P)Control:J2Cmd")
{
    field(DESC, "Commanded angle for joint 2")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))J2CMD")
    field(EGU, "deg")
    field(PINI, 1)
    field(PREC, 4)
    field(FLNK, "$(P)Control:auto_moveJ_calc.PROC")
}
record(ao, "$(P)Control:J2TweakVal")
{
    field(DESC, "Joint 2 tweak step size")
    field(EGU, "deg")
    field(PREC, 4)
}
record(bo, "$(P)Control:J2TweakFwd")
{
    field(DESC, "Tweak joint 2 forward")
    field(FLNK, "$(P)Control:J2TweakCalcFwd.PROC")
}
record(bo, "$(P)Control:J2TweakRev")
{
    field(DESC, "Tweak joint 2 backward")
    field(FLNK, "$(P)Control:J2TweakCalcRev.PROC")
}
record(calcout, "$(P)Control:J2TweakCalcFwd")
{
    field(INPA, "$(P)Control:J2Cmd")
    field(INPB, "$(P)Control:J2TweakVal")
    field(CALC, "A + B")
    field(OUT, "$(P)Control:J2Cmd PP")
}
record(calcout, "$(P)Control:J2TweakCalcRev")
{
    field(INPA, "$(P)Control:J2Cmd")
    field(INPB, "$(P)Control:J2TweakVal")
    field(CALC, "A - B")
    field(OUT, "$(P)Control:J2Cmd PP")
}

# -----------------------------------------------------------

record(ao, "$(P)Control:J3Cmd")
{
    field(DESC, "Commanded angle for joint 3")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))J3CMD")
    field(EGU, "deg")
    field(PINI, 1)
    field(PREC, 4)
    field(FLNK, "$(P)Control:auto_moveJ_calc.PROC")
}
record(ao, "$(P)Control:J3TweakVal")
{
    field(DESC, "Joint 3 tweak step size")
    field(EGU, "deg")
    field(PREC, 4)
}
record(bo, "$(P)Control:J3TweakFwd")
{
    field(DESC, "Tweak joint 3 forward")
    field(FLNK, "$(P)Control:J3TweakCalcFwd.PROC")
}
record(bo, "$(P)Control:J3TweakRev")
{
    field(DESC, "Tweak joint 3 backward")
    field(FLNK, "$(P)Control:J3TweakCalcRev.PROC")
}
record(calcout, "$(P)Control:J3TweakCalcFwd")
{
    field(INPA, "$(P)Control:J3Cmd")
    field(INPB, "$(P)Control:J3TweakVal")
    field(CALC, "A + B")
    field(OUT, "$(P)Control:J3Cmd PP")
}
record(calcout, "$(P)Control:J3TweakCalcRev")
{
    field(INPA, "$(P)Control:J3Cmd")
    field(INPB, "$(P)Control:J3TweakVal")
    field(CALC, "A - B")
    field(OUT, "$(P)Control:J3Cmd PP")
}

# -----------------------------------------------------------

record(ao, "$(P)Control:J4Cmd")
{
    field(DESC, "Commanded angle for joint 4")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))J4CMD")
    field(EGU, "deg")
    field(PINI, 1)
    field(PREC, 4)
    field(FLNK, "$(P)Control:auto_moveJ_calc.PROC")
}
record(ao, "$(P)Control:J4TweakVal")
{
    field(DESC, "Joint 4 tweak step size")
    field(EGU, "deg")
    field(PREC, 4)
}
record(bo, "$(P)Control:J4TweakFwd")
{
    field(DESC, "Tweak joint 4 forward")
    field(FLNK, "$(P)Control:J4TweakCalcFwd.PROC")
}
record(bo, "$(P)Control:J4TweakRev")
{
    field(DESC, "Tweak joint 4 backward")
    field(FLNK, "$(P)Control:J4TweakCalcRev.PROC")
}
record(calcout, "$(P)Control:J4TweakCalcFwd")
{
    field(INPA, "$(P)Control:J4Cmd")
    field(INPB, "$(P)Control:J4TweakVal")
    field(CALC, "A + B")
    field(OUT, "$(P)Control:J4Cmd PP")
}
record(calcout, "$(P)Control:J4TweakCalcRev")
{
    field(INPA, "$(P)Control:J4Cmd")
    field(INPB, "$(P)Control:J4TweakVal")
    field(CALC, "A - B")
    field(OUT, "$(P)Control:J4Cmd PP")
}

# -----------------------------------------------------------

record(ao, "$(P)Control:J5Cmd")
{
    field(DESC, "Commanded angle for joint 5")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))J5CMD")
    field(EGU, "deg")
    field(PINI, 1)
    field(PREC, 4)
    field(FLNK, "$(P)Control:auto_moveJ_calc.PROC")
}
record(ao, "$(P)Control:J5TweakVal")
{
    field(DESC, "Joint 5 tweak step size")
    field(EGU, "deg")
    field(PREC, 4)
}
record(bo, "$(P)Control:J5TweakFwd")
{
    field(DESC, "Tweak joint 5 forward")
    field(FLNK, "$(P)Control:J5TweakCalcFwd.PROC")
}
record(bo, "$(P)Control:J5TweakRev")
{
    field(DESC, "Tweak joint 5 backward")
    field(FLNK, "$(P)Control:J5TweakCalcRev.PROC")
}
record(calcout, "$(P)Control:J5TweakCalcFwd")
{
    field(INPA, "$(P)Control:J5Cmd")
    field(INPB, "$(P)Control:J5TweakVal")
    field(CALC, "A + B")
    field(OUT, "$(P)Control:J5Cmd PP")
}
record(calcout, "$(P)Control:J5TweakCalcRev")
{
    field(INPA, "$(P)Control:J5Cmd")
    field(INPB, "$(P)Control:J5TweakVal")
    field(CALC, "A - B")
    field(OUT, "$(P)Control:J5Cmd PP")
}

# -----------------------------------------------------------

record(ao, "$(P)Control:J6Cmd")
{
    field(DESC, "Commanded angle for joint 6")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))J6CMD")
    field(EGU, "deg")
    field(PINI, 1)
    field(PREC, 4)
    field(FLNK, "$(P)Control:auto_moveJ_calc.PROC")
}
record(ao, "$(P)Control:J6TweakVal")
{
    field(DESC, "Joint 6 tweak step size")
    field(EGU, "deg")
    field(PREC, 4)
}
record(bo, "$(P)Control:J6TweakFwd")
{
    field(DESC, "Tweak joint 6 forward")
    field(FLNK, "$(P)Control:J6TweakCalcFwd.PROC")
}
record(bo, "$(P)Control:J6TweakRev")
{
    field(DESC, "Tweak joint 6 backward")
    field(FLNK, "$(P)Control:J6TweakCalcRev.PROC")
}
record(calcout, "$(P)Control:J6TweakCalcFwd")
{
    field(INPA, "$(P)Control:J6Cmd")
    field(INPB, "$(P)Control:J6TweakVal")
    field(CALC, "A + B")
    field(OUT, "$(P)Control:J6Cmd PP")
}
record(calcout, "$(P)Control:J6TweakCalcRev")
{
    field(INPA, "$(P)Control:J6Cmd")
    field(INPB, "$(P)Control:J6TweakVal")
    field(CALC, "A - B")
    field(OUT, "$(P)Control:J6Cmd PP")
}

#======================
# TCP pose control
#======================

record(bo, "$(P)Control:moveL")
{
    field(DESC, "Move to TCP pose linearly")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))MOVEL")
}

record(bo, "$(P)Control:waypoint_moveL")
{
    field(DESC, "moveL followed by gripper action")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))WAYPOINT_MOVEL")
}

record(ao, "$(P)Control:LinearSpeed")
{
    field(DESC, "Linear speed for moveL")
    field(DTYP, "asynFloat64")
    field(PREC, 3)
    field(EGU, "m/s")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))LINEAR_SPEED")
}

record(ao, "$(P)Control:LinearAcceleration")
{
    field(DESC, "Linear acceleration for moveL")
    field(DTYP, "asynFloat64")
    field(PREC, 3)
    field(EGU, "m/s/s")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))LINEAR_ACCELERATION")
}

record(ao, "$(P)Control:LinearBlend")
{
    field(DESC, "Linear blend for moveL paths")
    field(DTYP, "asynFloat64")
    field(PREC, 3)
    field(EGU, "m")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))LINEAR_BLEND")
}

record(bo, "$(P)Control:stopL")
{
    field(DESC, "Stop linear move to TCP pose")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))STOPL")
    field(FLNK, "$(P)Control:reset_both_cmd.PROC")
}

record(bo, "$(P)Control:AutoMoveL")
{
    field(DESC, "If 1, moveL runs when Cmd changes")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL, 0)
}

record(calcout, "$(P)Control:auto_moveL_calc")
{
    field(INPA, "$(P)Control:AutoMoveL")
    field(CALC, "A")
    field(OOPT, "When Non-zero")
    field(OUT, "$(P)Control:moveL.PROC")
}

record(waveform, "$(P)Control:ActualTCPPose")
{
    field(DESC, "Actual TCP Pose")     
    field(DTYP, "asynFloat64ArrayIn")
    field(FTVL, "DOUBLE")
    field(PINI, "1")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ACTUAL_TCP_POSE")
    field(NELM, 6)
    field(FLNK, "$(P)pose_index_fanout.PROC")
    field(SCAN, "I/O Intr")
}

record(fanout, "$(P)pose_index_fanout")
{
    field(LNK0, "$(P)Control:pose_index0")
    field(LNK1, "$(P)Control:pose_index1")
    field(LNK2, "$(P)Control:pose_index2")
    field(LNK3, "$(P)Control:pose_index3")
    field(LNK4, "$(P)Control:pose_index4")
    field(LNK5, "$(P)Control:pose_index5")
}

# subArray to extract each element of ActualTCPPose waveform
record(subArray, "$(P)Control:pose_index0")
{
    field(INP, "$(P)Control:ActualTCPPose.VAL")
    field(FTVL, "DOUBLE")
    field(MALM, "6")
    field(NELM, "1")
    field(INDX, "0")
    field(EGU, "mm")
    field(PREC, 4)
}
record(subArray, "$(P)Control:pose_index1")
{
    field(INP, "$(P)Control:ActualTCPPose.VAL")
    field(FTVL, "DOUBLE")
    field(MALM, "6")
    field(NELM, "1")
    field(INDX, "1")
    field(EGU, "mm")
    field(PREC, 4)
}
record(subArray, "$(P)Control:pose_index2")
{
    field(INP, "$(P)Control:ActualTCPPose.VAL")
    field(FTVL, "DOUBLE")
    field(MALM, "6")
    field(NELM, "1")
    field(INDX, "2")
    field(EGU, "mm")
    field(PREC, 4)
}
record(subArray, "$(P)Control:pose_index3")
{
    field(INP, "$(P)Control:ActualTCPPose.VAL")
    field(FTVL, "DOUBLE")
    field(MALM, "6")
    field(NELM, "1")
    field(INDX, "3")
    field(EGU, "deg")
    field(PREC, 4)
}
record(subArray, "$(P)Control:pose_index4")
{
    field(INP, "$(P)Control:ActualTCPPose.VAL")
    field(FTVL, "DOUBLE")
    field(MALM, "6")
    field(NELM, "1")
    field(INDX, "4")
    field(EGU, "deg")
    field(PREC, 4)
}
record(subArray, "$(P)Control:pose_index5")
{
    field(INP, "$(P)Control:ActualTCPPose.VAL")
    field(FTVL, "DOUBLE")
    field(MALM, "6")
    field(NELM, "1")
    field(INDX, "5")
    field(EGU, "deg")
    field(PREC, 4)
}

# stores DOLx.VAL in LNKx.VAL
# resets commanded TCP pose to the current measured pose
record(seq, "$(P)Control:ResetPoseCmd")
{
    field(PINI, 1)

    field(DOL0, "$(P)Control:pose_index0")
    field(LNK0, "$(P)Control:PoseXCmd PP")

    field(DOL1, "$(P)Control:pose_index1")
    field(LNK1, "$(P)Control:PoseYCmd PP")

    field(DOL2, "$(P)Control:pose_index2")
    field(LNK2, "$(P)Control:PoseZCmd PP")

    field(DOL3, "$(P)Control:pose_index3")
    field(LNK3, "$(P)Control:PoseRollCmd PP")
    
    field(DOL4, "$(P)Control:pose_index4")
    field(LNK4, "$(P)Control:PosePitchCmd PP")

    field(DOL5, "$(P)Control:pose_index5")
    field(LNK5, "$(P)Control:PoseYawCmd PP")
}

# -----------------------------------------------------------

record(ao, "$(P)Control:PoseXCmd")
{
    field(DESC, "Commanded TCP X")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))POSE_X_CMD")
    field(EGU, "mm")
    field(PINI, 1)
    field(PREC, 4)
    field(FLNK, "$(P)Control:auto_moveL_calc.PROC")
}
record(ao, "$(P)Control:PoseXTweakVal")
{
    field(DESC, "X TCP pose tweak step size")
    field(EGU, "mm")
    field(PREC, 4)
    field(DRVH, "100.0")
    field(DRVL, "0.0")
}
record(bo, "$(P)Control:PoseXTweakFwd")
{
    field(DESC, "Tweak X TCP pose forward")
    field(FLNK, "$(P)Control:PoseXTweakCalcFwd.PROC")
}
record(bo, "$(P)Control:PoseXTweakRev")
{
    field(DESC, "Tweak X TCP pose backward")
    field(FLNK, "$(P)Control:PoseXTweakCalcRev.PROC")
}
record(calcout, "$(P)Control:PoseXTweakCalcFwd")
{
    field(INPA, "$(P)Control:PoseXCmd")
    field(INPB, "$(P)Control:PoseXTweakVal")
    field(CALC, "A + B")
    field(OUT, "$(P)Control:PoseXCmd PP")
}
record(calcout, "$(P)Control:PoseXTweakCalcRev")
{
    field(INPA, "$(P)Control:PoseXCmd")
    field(INPB, "$(P)Control:PoseXTweakVal")
    field(CALC, "A - B")
    field(OUT, "$(P)Control:PoseXCmd PP")
}

# -----------------------------------------------------------

record(ao, "$(P)Control:PoseYCmd")
{
    field(DESC, "Commanded TCP Y")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))POSE_Y_CMD")
    field(EGU, "mm")
    field(PINI, 1)
    field(PREC, 4)
    field(FLNK, "$(P)Control:auto_moveL_calc.PROC")
}
record(ao, "$(P)Control:PoseYTweakVal")
{
    field(DESC, "Y TCP pose tweak step size")
    field(EGU, "mm")
    field(PREC, 4)
    field(DRVH, "100")
    field(DRVL, "0.0")
}
record(bo, "$(P)Control:PoseYTweakFwd")
{
    field(DESC, "Tweak Y TCP pose forward")
    field(FLNK, "$(P)Control:PoseYTweakCalcFwd.PROC")
}
record(bo, "$(P)Control:PoseYTweakRev")
{
    field(DESC, "Tweak Y TCP pose backward")
    field(FLNK, "$(P)Control:PoseYTweakCalcRev.PROC")
}
record(calcout, "$(P)Control:PoseYTweakCalcFwd")
{
    field(INPA, "$(P)Control:PoseYCmd")
    field(INPB, "$(P)Control:PoseYTweakVal")
    field(CALC, "A + B")
    field(OUT, "$(P)Control:PoseYCmd PP")
}
record(calcout, "$(P)Control:PoseYTweakCalcRev")
{
    field(INPA, "$(P)Control:PoseYCmd")
    field(INPB, "$(P)Control:PoseYTweakVal")
    field(CALC, "A - B")
    field(OUT, "$(P)Control:PoseYCmd PP")
}

# -----------------------------------------------------------


record(ao, "$(P)Control:PoseZCmd")
{
    field(DESC, "Commanded TCP Z")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))POSE_Z_CMD")
    field(EGU, "mm")
    field(PINI, 1)
    field(PREC, 4)
    field(FLNK, "$(P)Control:auto_moveL_calc.PROC")
}
record(ao, "$(P)Control:PoseZTweakVal")
{
    field(DESC, "TCP Z tweak step size")
    field(EGU, "mm")
    field(PREC, 4)
    field(DRVH, "100")
    field(DRVL, "0.0")
}
record(bo, "$(P)Control:PoseZTweakFwd")
{
    field(DESC, "Tweak TCP Z forward")
    field(FLNK, "$(P)Control:PoseZTweakCalcFwd.PROC")
}
record(bo, "$(P)Control:PoseZTweakRev")
{
    field(DESC, "Tweak TCP Z backward")
    field(FLNK, "$(P)Control:PoseZTweakCalcRev.PROC")
}
record(calcout, "$(P)Control:PoseZTweakCalcFwd")
{
    field(INPA, "$(P)Control:PoseZCmd")
    field(INPB, "$(P)Control:PoseZTweakVal")
    field(CALC, "A + B")
    field(OUT, "$(P)Control:PoseZCmd PP")
}
record(calcout, "$(P)Control:PoseZTweakCalcRev")
{
    field(INPA, "$(P)Control:PoseZCmd")
    field(INPB, "$(P)Control:PoseZTweakVal")
    field(CALC, "A - B")
    field(OUT, "$(P)Control:PoseZCmd PP")
}

# -----------------------------------------------------------

record(ao, "$(P)Control:PoseRollCmd")
{
    field(DESC, "Commanded TCP roll")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))POSE_ROLL_CMD")
    field(EGU, "deg")
    field(PINI, 1)
    field(PREC, 4)
    field(FLNK, "$(P)Control:auto_moveL_calc.PROC")
}
record(ao, "$(P)Control:PoseRollTweakVal")
{
    field(DESC, "TCP roll tweak step size")
    field(EGU, "deg")
    field(PREC, 4)
    field(DRVL, "0.0")
}
record(bo, "$(P)Control:PoseRollTweakFwd")
{
    field(DESC, "Tweak TCP roll forward")
    field(FLNK, "$(P)Control:PoseRollTweakCalcFwd.PROC")
}
record(bo, "$(P)Control:PoseRollTweakRev")
{
    field(DESC, "Tweak TCP roll backward")
    field(FLNK, "$(P)Control:PoseRollTweakCalcRev.PROC")
}
record(calcout, "$(P)Control:PoseRollTweakCalcFwd")
{
    field(INPA, "$(P)Control:PoseRollCmd")
    field(INPB, "$(P)Control:PoseRollTweakVal")
    field(CALC, "A + B")
    field(OUT, "$(P)Control:PoseRollCmd PP")
}
record(calcout, "$(P)Control:PoseRollTweakCalcRev")
{
    field(INPA, "$(P)Control:PoseRollCmd")
    field(INPB, "$(P)Control:PoseRollTweakVal")
    field(CALC, "A - B")
    field(OUT, "$(P)Control:PoseRollCmd PP")
}

# -----------------------------------------------------------

record(ao, "$(P)Control:PosePitchCmd")
{
    field(DESC, "Commanded TCP pitch")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))POSE_PITCH_CMD")
    field(EGU, "deg")
    field(PINI, 1)
    field(PREC, 4)
    field(FLNK, "$(P)Control:auto_moveL_calc.PROC")
}
record(ao, "$(P)Control:PosePitchTweakVal")
{
    field(DESC, "TCP pitch tweak step size")
    field(EGU, "deg")
    field(PREC, 4)
    field(DRVL, "0.0")
}
record(bo, "$(P)Control:PosePitchTweakFwd")
{
    field(DESC, "Tweak TCP pitch forward")
    field(FLNK, "$(P)Control:PosePitchTweakCalcFwd.PROC")
}
record(bo, "$(P)Control:PosePitchTweakRev")
{
    field(DESC, "Tweak TCP pitch backward")
    field(FLNK, "$(P)Control:PosePitchTweakCalcRev.PROC")
}
record(calcout, "$(P)Control:PosePitchTweakCalcFwd")
{
    field(INPA, "$(P)Control:PosePitchCmd")
    field(INPB, "$(P)Control:PosePitchTweakVal")
    field(CALC, "A + B")
    field(OUT, "$(P)Control:PosePitchCmd PP")
}
record(calcout, "$(P)Control:PosePitchTweakCalcRev")
{
    field(INPA, "$(P)Control:PosePitchCmd")
    field(INPB, "$(P)Control:PosePitchTweakVal")
    field(CALC, "A - B")
    field(OUT, "$(P)Control:PosePitchCmd PP")
}

# -----------------------------------------------------------

record(ao, "$(P)Control:PoseYawCmd")
{
    field(DESC, "Commanded TCP yaw")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))POSE_YAW_CMD")
    field(EGU, "deg")
    field(PINI, 1)
    field(PREC, 4)
    field(FLNK, "$(P)Control:auto_moveL_calc.PROC")
}
record(ao, "$(P)Control:PoseYawTweakVal")
{
    field(DESC, "TCP yaw tweak step size")
    field(EGU, "deg")
    field(PREC, 4)
    field(DRVL, "0.0")
}
record(bo, "$(P)Control:PoseYawTweakFwd")
{
    field(DESC, "Tweak TCP yaw forward")
    field(FLNK, "$(P)Control:PoseYawTweakCalcFwd.PROC")
}
record(bo, "$(P)Control:PoseYawTweakRev")
{
    field(DESC, "Tweak TCP yaw backward")
    field(FLNK, "$(P)Control:PoseYawTweakCalcRev.PROC")
}
record(calcout, "$(P)Control:PoseYawTweakCalcFwd")
{
    field(INPA, "$(P)Control:PoseYawCmd")
    field(INPB, "$(P)Control:PoseYawTweakVal")
    field(CALC, "A + B")
    field(OUT, "$(P)Control:PoseYawCmd PP")
}
record(calcout, "$(P)Control:PoseYawTweakCalcRev")
{
    field(INPA, "$(P)Control:PoseYawCmd")
    field(INPB, "$(P)Control:PoseYawTweakVal")
    field(CALC, "A - B")
    field(OUT, "$(P)Control:PoseYawCmd PP")
}
