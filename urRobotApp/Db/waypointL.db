# This database defines a single waypoint for the robot in Cartesian space

record(stringout, "$(P)WaypointL:$(N)")
{
    field(VAL, "$(DESC=)")
}

record(bo, "$(P)WaypointL:$(N):Enabled")
{
    field(VAL, 0)
    field(ZNAM, "0")
    field(ONAM, "1")
}

record(bo, "$(P)WaypointL:$(N):SetEnabled")
{
    field(VAL, 1)
    field(OUT, "$(P)WaypointL:$(N):Enabled PP")
}

record(ao, "$(P)WaypointL:$(N):X")
{
    field(VAL, "$(X=0)")
    field(PREC, 4)
    field(EGU, "mm")
    field(FLNK, "$(P)WaypointL:$(N):SetEnabled.PROC")
}

record(ao, "$(P)WaypointL:$(N):Y")
{
    field(VAL, "$(Y=0)")
    field(PREC, 4)
    field(EGU, "mm")
    field(FLNK, "$(P)WaypointL:$(N):SetEnabled.PROC")
}

record(ao, "$(P)WaypointL:$(N):Z")
{
    field(VAL, "$(Z=0)")
    field(PREC, 4)
    field(EGU, "mm")
    field(FLNK, "$(P)WaypointL:$(N):SetEnabled.PROC")
}

record(ao, "$(P)WaypointL:$(N):Roll")
{
    field(VAL, "$(ROLL=0)")
    field(PREC, 2)
    field(EGU, "deg")
    field(FLNK, "$(P)WaypointL:$(N):SetEnabled.PROC")
}

record(ao, "$(P)WaypointL:$(N):Pitch")
{
    field(VAL, "$(PITCH=0)")
    field(PREC, 2)
    field(EGU, "deg")
    field(FLNK, "$(P)WaypointL:$(N):SetEnabled.PROC")
}

record(ao, "$(P)WaypointL:$(N):Yaw")
{
    field(VAL, "$(YAW=0)")
    field(PREC, 2)
    field(EGU, "deg")
    field(FLNK, "$(P)WaypointL:$(N):SetEnabled.PROC")
}

record(bo, "$(P)WaypointL:$(N):Gripper")
{
    field(ZNAM, "OPEN")
    field(ONAM, "CLOSED")
    field(VAL, "$(GRIPPER=0)")
    field(FLNK, "$(P)WaypointL:$(N):SetEnabled.PROC")
}

record(ao, "$(P)WaypointL:$(N):Speed")
{
    field(VAL, "$(SPEED=0.1)")
    field(PREC, 2)
    field(EGU, "m/s")
    field(FLNK, "$(P)WaypointL:$(N):SetEnabled.PROC")
}

record(ao, "$(P)WaypointL:$(N):Acceleration")
{
    field(VAL, "$(ACCEL=1.0)")
    field(PREC, 2)
    field(EGU, "m/s/s")
    field(FLNK, "$(P)WaypointL:$(N):SetEnabled.PROC")
}

record(ao, "$(P)WaypointL:$(N):Blend")
{
    field(VAL, "$(BLEND=0.0)")
    field(PREC, 2)
    field(EGU, "m")
    field(FLNK, "$(P)WaypointL:$(N):SetEnabled.PROC")
}

record(bo, "$(P)WaypointL:$(N):Action")
{
    field(FLNK, "") # Action link set by user
    field(VAL, 1)
    field(OUT, "$(P)WaypointL:$(N):set_not_done_seq.PROC")
}

# Action processing automatically sets ActionDone=0 to start
record(seq, "$(P)WaypointL:$(N):set_not_done_seq")
{
    field(DOL0, "0")
    field(LNK0, "$(P)WaypointL:$(N):ActionDone PP")
}

record(calcout, "$(P)WaypointL:$(N):ActionDoneCalc")
{
    field(INPA, "") # set to selected action calc's .OUT by select func
    field(CALC, "A")
    field(OUT, "$(P)WaypointL:$(N):ActionDone PP")
    field(SCAN, ".1 second") # not sure why this is needed
}

record(bo, "$(P)WaypointL:$(N):ActionDone") 
{
    field(DESC, "1 if the action is done, otherwise 0")
    field(VAL, 1)
}

record(luascript, "$(P)WaypointL:$(N):CopyActionLink")
{
    field(CODE, "@copy_action_link.lua copy_action_link({P='$(P)',R='',T='L',N='$(N)'})")
}

record(mbbi, "$(P)WaypointL:$(N):ActionOpt")
{
    field(VAL, 0)
    field(ZRST, "None")
    field(ONST, "1")
    field(TWST, "2")
    field(THST, "3")
    field(FRST, "4")
    field(FVST, "5")
    field(SXST, "6")
    field(SVST, "7")
    field(EIST, "8")
    field(NIST, "9")
    field(TEST, "10")
    field(FLNK, "$(P)WaypointL:$(N):ActionOptSelect")
}

# processes ActionOptSelect when ActionLink's change
record(calcout, "$(P)WaypointL:$(N):link_trigger_select")
{
    field(INPA, "$(P)ActionLink1.FLNK CP")
    field(INPB, "$(P)ActionLink2.FLNK CP")
    field(INPC, "$(P)ActionLink3.FLNK CP")
    field(INPD, "$(P)ActionLink4.FLNK CP")
    field(INPE, "$(P)ActionLink5.FLNK CP")
    field(INPF, "$(P)ActionLink6.FLNK CP")
    field(INPG, "$(P)ActionLink7.FLNK CP")
    field(INPH, "$(P)ActionLink8.FLNK CP")
    field(INPI, "$(P)ActionLink9.FLNK CP")
    field(INPJ, "$(P)ActionLink10.FLNK CP")
    field(FLNK, "$(P)WaypointL:$(N):ActionOptSelect.PROC")
}

record(luascript, "$(P)WaypointL:$(N):ActionOptSelect")
{
    field(INPA, "$(P)WaypointL:$(N):ActionOpt")
    field(CODE, "@action_opt.lua select({P='$(P)',T='L',N='$(N)'})")
}

record(printf, "$(P)WaypointL:$(N):format_desc_pv")
{
    field(INP0, "$(P)WaypointL:$(N):ActionOpt CP")
    field(FMT, "$(P)ActionLink%d.DESC")
}

record(luascript, "$(P)WaypointL:$(N):get_action_desc")
{
    field(INPA, "$(P)WaypointL:$(N):ActionOpt")
    field(INAA,"$(P)WaypointL:$(N):format_desc_pv.VAL CP")
    field(CODE, 'epics=require("epics");return (A == 0) and "" or epics.get(AA)')
}

record(stringin, "$(P)WaypointL:$(N):ActionDesc")
{
    field(DESC, "Description of action for WaypointL:$(N)")
    field(INP, "$(P)WaypointL:$(N):get_action_desc.SVAL CP")
}

# 1 if robot is at waypoint within tolerance, otherwise 0
record(luascript, "$(P)WaypointL:$(N):Reached") {
    field(INPA, "$(P)Receive:ActualTCP_X CP")
    field(INPB, "$(P)Receive:ActualTCP_Y CP")
    field(INPC, "$(P)Receive:ActualTCP_Z CP")
    field(INPD, "$(P)Receive:ActualTCP_Roll CP")
    field(INPE, "$(P)Receive:ActualTCP_Pitch CP")
    field(INPF, "$(P)Receive:ActualTCP_Yaw CP")
    field(CODE, "@waypoints.lua waypointL_reached({prefix='$(P)', N=$(N)})")
    field(PREC, 0)
    field(VAL, 0)
}

# stores DOLx.VAL in LNKx.VAL
# Requires that RTDE Receive databases have been loaded
record(seq, "$(P)WaypointL:$(N):Reset")
{
    # Sets waypoint joint angles to the current measured angles
    field(DOL0, "$(P)Receive:ActualTCP_X")
    field(LNK0, "$(P)WaypointL:$(N):X PP")
    field(DOL1, "$(P)Receive:ActualTCP_Y")
    field(LNK1, "$(P)WaypointL:$(N):Y PP")
    field(DOL2, "$(P)Receive:ActualTCP_Z")
    field(LNK2, "$(P)WaypointL:$(N):Z PP")
    field(DOL3, "$(P)Receive:ActualTCP_Roll")
    field(LNK3, "$(P)WaypointL:$(N):Roll PP")
    field(DOL4, "$(P)Receive:ActualTCP_Pitch")
    field(LNK4, "$(P)WaypointL:$(N):Pitch PP")
    field(DOL5, "$(P)Receive:ActualTCP_Yaw")
    field(LNK5, "$(P)WaypointL:$(N):Yaw PP")
    field(FLNK, "$(P)WaypointL:$(N):SetEnabled.PROC")
}

record(bo, "$(P)WaypointL:$(N):moveL")
{
    field(FLNK, "$(P)WaypointL:$(N):moveL_IfEnabled.PROC")
}

record(calcout, "$(P)WaypointL:$(N):moveL_IfEnabled")
{
    field(INPA, "$(P)WaypointL:$(N):Enabled")
    field(OOPT, "When Non-zero")
    field(CALC, "A")
    field(OUT,"$(P)WaypointL:$(N):moveL_seq1.PROC")
}

record(seq, "$(P)WaypointL:$(N):moveL_seq1")
{
    # Disable AutoMoveL
    field(DOL0, "0")
    field(LNK0, "$(P)Control:AutoMoveL PP")

    # Set Control:JxCmd to WaypointL:$(N):Jx
    field(DOL1, "$(P)WaypointL:$(N):X")
    field(LNK1, "$(P)Control:PoseXCmd PP")
    field(DOL2, "$(P)WaypointL:$(N):Y")
    field(LNK2, "$(P)Control:PoseYCmd PP")
    field(DOL3, "$(P)WaypointL:$(N):Z")
    field(LNK3, "$(P)Control:PoseZCmd PP")
    field(DOL4, "$(P)WaypointL:$(N):Roll")
    field(LNK4, "$(P)Control:PoseRollCmd PP")
    field(DOL5, "$(P)WaypointL:$(N):Pitch")
    field(LNK5, "$(P)Control:PosePitchCmd PP")
    field(DOL6, "$(P)WaypointL:$(N):Yaw")
    field(LNK6, "$(P)Control:PoseYawCmd PP")
    
    field(FLNK, "$(P)WaypointL:$(N):moveL_seq2.PROC")
}

record(seq, "$(P)WaypointL:$(N):moveL_seq2")
{
    # Set to asynchronous motion
    field(DOL0, "1")
    field(LNK0, "$(P)Control:Asynchronous")
    
    # set speed, accel, blend, gripper action
    field(DOL1, "$(P)WaypointL:$(N):Speed")
    field(LNK1, "$(P)Control:LinearSpeed PP")
    field(DOL2, "$(P)WaypointL:$(N):Acceleration")
    field(LNK2, "$(P)Control:LinearAcceleration PP")
    field(DOL3, "$(P)WaypointL:$(N):Blend")
    field(LNK3, "$(P)Control:LinearBlend PP")
    # field(DOL4, "$(P)WaypointL:$(N):Gripper")
    # field(LNK4, "$(P)Control:WaypointGripperAction PP")
    field(DOL4, "1")
    field(LNK4, "$(P)WaypointL:$(N):CopyActionLink.PROC")
    
    # Do the move
    field(FLNK, "$(P)Control:waypoint_moveL.PROC")
}
